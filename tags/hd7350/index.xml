<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HD7350 on w-i-p</title>
    <link>https://asurati.github.io/wip/tags/hd7350/</link>
    <description>Recent content in HD7350 on w-i-p</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://asurati.github.io/wip/tags/hd7350/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HD 7350 demo: Texture</title>
      <link>https://asurati.github.io/wip/post/2022/06/27/hd-7350-demo-texture/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2022/06/27/hd-7350-demo-texture/</guid>
      <description>&lt;p&gt;&lt;em&gt;Warning: Improperly programming a GPU, or a display, may damage the devices.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This post demonstrates utilizing an image as a texture, to add details to the&#xA;surface of a square. The image is the one used&#xA;&lt;a href=&#34;https://vulkan-tutorial.com/Texture_mapping/Images&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;preparation&#34;&gt;&lt;strong&gt;Preparation:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The texture image is a JPEG of size 512x512. Extract the raw pixels in R8G8B8A8&#xA;format (equivalent to ABGR32, or 0xaabbggrr):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ convert -size 512x512 -depth 8 texture.jpg RBGA:texture.bin&#xA;$ xxd -i texture.bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The demo doesn&amp;rsquo;t yet have image-loading capability, hence the help being&#xA;requested from &lt;code&gt;xxd&lt;/code&gt; to convert the raw pixels into a C-style array that can be&#xA;easily inserted into the demo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HD 7350 demo: MSAA 8x</title>
      <link>https://asurati.github.io/wip/post/2022/06/14/hd-7350-demo-msaa-8x/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2022/06/14/hd-7350-demo-msaa-8x/</guid>
      <description>&lt;p&gt;&lt;em&gt;Warning: Improperly programming a GPU, or a display, may damage the devices.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This post demonstrates the HD7350 support for MSAA rendering, through the use&#xA;of Color Mask and Fragment Mask, the former of which facilitates Fast Clear of&#xA;a render surface, and the latter, allows drawing on compressed MSAA surfaces.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;color-mask&#34;&gt;&lt;strong&gt;Color Mask:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The Color Mask, or CMask, is a buffer, of size corresponding to the size of the&#xA;target surface to which it is attached, which allows the GPU to mark the&#xA;target surface as clear, without having to actually write the pixels on to the&#xA;target surface. The state of the control bits stored in the CMask buffer allows&#xA;the GPU to mark corresponding regions of the target surface as clear.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HD 7350 demo: A Triangle</title>
      <link>https://asurati.github.io/wip/post/2022/05/31/hd-7350-demo-a-triangle/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2022/05/31/hd-7350-demo-a-triangle/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;#update1&#34;&gt;Update #1&lt;/a&gt; on: 2nd June, 2022.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;#update2&#34;&gt;Update #2&lt;/a&gt; on: 5th June, 2022.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;Warning: Improperly programming a GPU, or a display, may damage the devices.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This post demonstrates setting up a HD7350 pipeline to draw a triangle.&#xA;The approach adopted here is that of choosing bare-metal programming over&#xA;relying on established interfaces like the Linux DRM.&#xA;That is not to say that Linux DRM&#xA;cannot be used - it is possible to send compute or rendering commands to the&#xA;GPU by directly interfacing with the DRM layer on Linux, or by moving up to an&#xA;even higher abstraction provided by OpenGL/Vulkan APIs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
