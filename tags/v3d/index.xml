<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>V3D on w-i-p</title>
    <link>https://asurati.github.io/wip/tags/v3d/</link>
    <description>Recent content in V3D on w-i-p</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Oct 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://asurati.github.io/wip/tags/v3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QPU Demo: Export HVS output to the system RAM</title>
      <link>https://asurati.github.io/wip/post/2021/10/08/qpu-demo-export-hvs-output-to-the-system-ram/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/10/08/qpu-demo-export-hvs-output-to-the-system-ram/</guid>
      <description>&lt;p&gt;This demo presents a way to configure HVS FIFO2/Channel2 and the Transposer&#xA;(TXP) block to gather the scaled/converted/transformed scan-lines into a buffer&#xA;inside the system RAM.&lt;/p&gt;&#xA;&lt;p&gt;The HVS FIFO2 has a choice in how its output is consumed - it can be consumed&#xA;either by PV1, or by the TXP block. The RPi firmware, by default, seems to&#xA;disable the FIFO2 output (&lt;code&gt;DSP3_MUX&lt;/code&gt;), so that it is not connected to PV1. This is&#xA;very fortunate, as the firmware has already done a part of the necessary setup.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HVS and PV Settings</title>
      <link>https://asurati.github.io/wip/post/2021/10/07/hvs-and-pv-settings/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/10/07/hvs-and-pv-settings/</guid>
      <description>&lt;p&gt;This post investigates the contents of the registers belonging to the&#xA;Hardware Video Scaler (HVS), and to the PixelValve (PV) devices.&lt;/p&gt;&#xA;&lt;p&gt;When a request is made to the&#xA;&lt;a href=&#34;https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface#allocate-buffer&#34;&gt;MailBox&lt;/a&gt;&#xA;interface for a Frame Buffer with required properties, the RPi firmware&#xA;programs the HVS and the PV in order to drive the display accordingly.&lt;/p&gt;&#xA;&lt;p&gt;The demos have been requesting a resolution of 640x480, 32bpp, with a default&#xA;pixel order of BGRA8888 (0xaarrggbb, or ARGB32).&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: Triangle with MSAA 4x</title>
      <link>https://asurati.github.io/wip/post/2021/10/05/qpu-demo-triangle-with-msaa-4x/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/10/05/qpu-demo-triangle-with-msaa-4x/</guid>
      <description>&lt;p&gt;This demo works with the same triangle as seen in earlier demos; the demo&#xA;utilizes the full 3D pipeline, employs Coordinate and Vertex shaders that&#xA;are not merely pass-through but that perform the Perspective and ViewPort&#xA;transformations (the Model and Camera/View transformations are assumed to have&#xA;been performed outside), and enables 4x multi-sampling for a smoother display&#xA;of the triangle.&lt;/p&gt;&#xA;&lt;p&gt;The Coordinate and Vertex shaders perform the Matrix-Vector multiplication, in&#xA;order to calculate the Clip Coordinates of each vertex, perform the Perspective&#xA;divide to calculate the Normalized Device Coordinates, and perform the&#xA;ViewPort Transformation to calculate the Screen Coordinates relative to the&#xA;ViewPort Centre. The Vertex Shader additionally passes through the colour&#xA;information of each vertex.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: Triangle with a GL Pass-Through Shader</title>
      <link>https://asurati.github.io/wip/post/2021/10/04/qpu-demo-triangle-with-a-gl-pass-through-shader/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/10/04/qpu-demo-triangle-with-a-gl-pass-through-shader/</guid>
      <description>&lt;p&gt;This demo results in the same output image as displayed in&#xA;&lt;a href=&#34;https://asurati.github.io/wip/wip/post/2021/10/02/qpu-demo-nv-shader&#34;&gt;Triangle With NV Shader&lt;/a&gt;, but this&#xA;time the full 3D pipeline is employed, with the exception that the Coordinate&#xA;and the Vertex Shaders are mere pass-through shaders.&lt;/p&gt;&#xA;&lt;p&gt;The Coordinate and the Vertex Shaders are each tasked with reading the input&#xA;vertex attributes off the VPM (placed there by the Vertex Cache Manager), and&#xA;writing shaded vertices in specific output formats back into the VPM.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: Triangle with NV Shader</title>
      <link>https://asurati.github.io/wip/post/2021/10/02/qpu-demo-triangle-with-nv-shader/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/10/02/qpu-demo-triangle-with-nv-shader/</guid>
      <description>&lt;p&gt;This demo presents a method of programming the GPU to display a triangle, with&#xA;the interpolation of the colours at the pixels covered by it. The graphics&#xA;concepts used here borrow heavily from those of OpenGL.&lt;/p&gt;&#xA;&lt;p&gt;The GPU pipeline supports running in non-vertex-shading mode, or the NV mode.&#xA;In this mode, pre-shaded vertices are presented to the pipeline. That is,&#xA;the jobs of coordinate and vertex shader are done outside of the pipeline. In&#xA;this demo, those jobs/calculations are done by hand, to produce the pre-shaded&#xA;vertices in the format expected by the mode (see the section&#xA;&lt;em&gt;Shaded Vertex Format in Memory&lt;/em&gt; in the specification for the layout of the&#xA;format).&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: Binary NOT operation</title>
      <link>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-binary-not-operation/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-binary-not-operation/</guid>
      <description>&lt;p&gt;This demo builds upon&#xA;&lt;a href=&#34;https://asurati.github.io/wip/wip/post/2021/09/28/qpu-demo-dma-transfers/&#34;&gt;QPU Demo: DMA Transfers&lt;/a&gt;,&#xA;and presents a method of importing four 16-element vectors of integers&#xA;from VPM to QPU registers, performing a binary NOT on the elements, and&#xA;exporting the results back to the VPM.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;transfer-methods&#34;&gt;&lt;strong&gt;Transfer Methods:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;For QPU to be able to access the vectors and perform any calculations on them,&#xA;they must first be brought from the system RAM, where they usually resides,&#xA;into the VPM. This was a topic of the second demo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: DMA Transfers</title>
      <link>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-dma-transfers/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-dma-transfers/</guid>
      <description>&lt;p&gt;This demo presents a method of programming the V3D DMA controller to&#xA;transfer four 16-element vectors of integers back and forth between the system&#xA;RAM and the VPM.&lt;/p&gt;&#xA;&lt;p&gt;It is natural for the QPU to work with 16-element vectors. To that end, its&#xA;registers can accommodate 16 32-bit values (there are indeed a few exceptions,&#xA;however).&lt;/p&gt;&#xA;&lt;p&gt;In AMD terminology, a QPU can be said to process a wavefront made up of 16&#xA;workitems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QPU Demo: Interrupting the host</title>
      <link>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-interrupting-the-host/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://asurati.github.io/wip/post/2021/09/28/qpu-demo-interrupting-the-host/</guid>
      <description>&lt;p&gt;This is the first in hopefully a few more articles demonstrating one of the&#xA;ways in which the RPi&amp;rsquo;s VideoCoreIV (vc4) GPU can be programmed.&lt;/p&gt;&#xA;&lt;p&gt;The 3D engine, V3D, is driven by the SIMD16 (physically SIMD4, but multiplexed&#xA;over four consecutive clock cycles) processors known as QPUs, Quad Processing Units,&#xA;or Quad Processors.&lt;/p&gt;&#xA;&lt;p&gt;In February 2014, Broadcom&#xA;&lt;a href=&#34;https://www.raspberrypi.org/blog/a-birthday-present-from-broadcom/&#34;&gt;released&lt;/a&gt;&#xA;a &lt;a href=&#34;https://docs.broadcom.com/doc/12358545&#34;&gt;specification&lt;/a&gt;&#xA;detailing the vc4 V3D architecture. That document is the primary basis&#xA;supporting the work demonstrated here.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
